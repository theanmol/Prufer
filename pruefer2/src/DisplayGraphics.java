import java.awt.*;  
import java.util.*;

import javax.swing.JFrame;  
  
public class DisplayGraphics extends Canvas{  
      static int vert,bin;
      static java.util.List<Integer>[] treee=null ;
      static int code[]=null;
      static int degree[]=null;
    public void paint(Graphics g) {
        //java.util.List<Integer>[] tree =funct();
        Queue <Integer> q;
   
        q = new LinkedList<>();
        int x1,y1,x2,y2;
        x1=50;
        y1=0;
        int visited[]=new int[vert];
        int xc[]=new int[vert];
        int yc[]=new int[vert];
        int level[]=new int[vert];
        
        q.add(0);
        xc[0]=50;
        yc[0]=150;
        level[0]=0;
        int xprev=0,plev=0;
        int element,i;
        g.setColor(Color.BLACK); 
        g.setFont(new Font("", Font.PLAIN, 20));
        g.drawString("Number of vertices in tree Generated by Prufer code is \t " +vert,50,20 );
        g.drawString("Generated Prufer code is \t " +Arrays.toString(code),50,50 );
        g.drawString("Degree of each vertex is \t " +Arrays.toString(degree),50,100 );
        if(bin==0)
            g.drawString("It is a Binary Tree\n" ,150,150);
            else
             g.drawString("It is not a Binary Tree\n" ,150,150);
            
        g.setFont(new Font("", Font.PLAIN, 12));
        g.setColor(Color.YELLOW);
        g.fillOval(xc[0]-10,yc[0]-20, 30, 30); 
        g.setColor(Color.BLACK);
        g.drawString("0",50,150);
        while (!q.isEmpty())
        {   
            element = q.remove();
            i = element;
            visited[i]=1;
            //y1=y1+50;
            
            int el=treee[i].size();
            
          //x2=0;
            for(int j=0;j<el;j++)
            {   int nextel=treee[i].get(j);
                if(visited[nextel]!=1){
                        level[nextel]=level[i]+1;
                        q.add(nextel);
                        if(plev!=level[nextel])
                        {
                            xprev=0;
                            plev=level[nextel];
                        }
                        yc[nextel]=yc[i]+50;
                        xc[nextel]=xprev+50;
                        xprev+=50;
                        
                        g.setColor(Color.YELLOW); 
                        g.fillOval(xc[nextel]-10,yc[nextel]-20, 30, 30); 
                        g.setColor(Color.BLACK);
                        g.drawString(" " +nextel,xc[nextel],yc[nextel] );
                     g.drawLine(xc[i],yc[i]+8,xc[nextel],yc[nextel]-18);
                     
                     
                }
            }
        }
                 setBackground(Color.WHITE);  
   
        
    
    }
        
            
     
    public static  java.util.List<Integer>[] funct()
    {
        Random rnd = new Random();
        PruferCode p= new PruferCode();
        
        {
            int v = rnd.nextInt(30) + 2;
            vert=v;
              code=new int[v-2];
            System.out.println("number of vertices is:"+v);
            
            System.out.println("generated sequence is:");
            
            for(int i=0;i<v-2;i++)
            {
                code[i]=rnd.nextInt(v);
            }
            for(int i=0;i<v-2;i++)
            {
                System.out.print(code[i] + " ");
            }
            System.out.println("");
           degree = new int[v];              //declaring array to store degree of each vertex
        Arrays.fill(degree, 1);                 //initializing with 1
        for (int vy : code)
            ++degree[vy]; 
        int number[]=new int[v-1];
        Arrays.fill(number, 0); 
        for(int d=0;d<vert;d++)
        {number[degree[d]]++;
        
        }
         bin=0;
        for(int d=0;d<vert;d++)
        {if(degree[d]>3)
            
        {
           System.out.println("Not a binarytree");  
           bin=1;
            break;
        }
        
        }
        if (bin==0)
            System.out.println("It is a binarytree"); 
            
        
        for(int d=1;d<vert-1;d++)
        {System.out.println("number of vertices with degree "+ d +" are : "+number[d]);
        }
            java.util.List<Integer>[] tree = p.pruferCode2Tree(code);
            System.out.println("Prufer code to tree conversion: "
                + Arrays.toString(tree));
            return tree;
    }
    }
    public static void main(String[] args) {  
         treee =funct();
        DisplayGraphics m=new DisplayGraphics(); 
        
        JFrame f=new JFrame();  
        f.add(m);  
        f.setSize(1000,700);  
       
        f.setVisible(true);  
    }  
        
    }  
  
